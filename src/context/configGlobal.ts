// Configuraci칩n global de la aplicaci칩n
const configGlobal = {
  canvasBackgraundColor: "#002", // Color de fondo del lienzo
  // spriteBackgroundColor: "#002", // Color de fondo de los sprites
  // linksColor: "rgb(173, 167, 167)", // Color de los enlaces
  // linksColorResaldato: "rgb(245, 229, 183)", // Color de los enlaces
  // particleColor: "rgb(235, 243, 124)", // Color de las part칤culas
  // arrowsColor: "rgb(88, 88, 88)", // Color de las flechas
  // panelColor: "rgb(177, 177, 177)", // Color del panel de informaci칩n
  // cameraPosition: [200, 0, 0] as [number, number, number], // Posici칩n inicial de la c치mara
  // cameraMaxDistance: 800, // Distancia m치xima de la c치mara
  // cameraMinDistance: 10, // Distancia m칤nima de la c치mara
  // nodeClickDistance: 70, // Distancia al nodo despues del click
  // linkClickDistance: 100, // Distancia al link despues del click
  DataBaseDir: "datasets/data.json", // Directorio de la base de datos
  // iconMenuBackgraundColor: "rgb(189, 189, 189)",
  // itemsMenuColor: "rgb(138, 137, 137)",
  // addNodoPanelColor: "rgb(255, 255, 255)",
  // shadowGeneral: "drop-shadow(0px 2px 8px rgba(255, 255, 255, 0.75))",
};

// Colores asignados a los grupos de nodos
const positionColor: Record<string, string> = {
  control: "rgb(0, 0, 255)", // Azul
  sumision: "rgb(0, 255, 51)", // Rojo
  pasaje: "rgb(27, 250, 250)", // Amarillo
};

const cameraPropsDev = {
  fov: 70, // 츼ngulo de visi칩n en grados (por defecto, el 치ngulo vertical) que define cu치n amplia es la perspectiva de la c치mara. 
  near: 0.1, // Distancia m칤nima desde la c치mara a la que se renderizan los objetos.
  far: 1000, // Distancia m치xima desde la c치mara a la que se renderizan los objetos.
  position: [30, 50, 100] as [number, number, number], // Posici칩n de la c치mara en el espacio 3D, definida como un arreglo con tres valores [洧논,洧녽,洧녾]

  dollySpeed: 5,    // Sensibilidad del zoom
  minDistance: 20,    // Distancia m칤nima para la c치mara 
  maxDistance: 170,   // Distancia m치xima para la c치mara 
};

const scenePropsDev = {
  radius: 80, // Radio del fondo estrellado
  depth: 5, // Profundidad del fondo estrellado
  count: 2000, // N칰mero de estrellas
  factor: 7, // Factor de dispersi칩n de las estrellas
  saturation: 1, // Saturaci칩n del color de las estrellas
  speed: 0.5, // Velocidad del movimiento de las estrellas
};

const tableNameDB = {
  nodes: "nodos",
  links: "links",
}


export { configGlobal, cameraPropsDev, scenePropsDev, tableNameDB, positionColor };




















































// /**
//    * Definici칩n de tipo para los enlaces
//    * @typedef {Object} LinkType
//    * @property {string} source - Nodo fuente del enlace
//    * @property {string} target - Nodo destino del enlace
//    * @property {boolean} isBidirectional - Indica si el enlace es bidireccional
//    */
// interface LinkType {
//   source: string;
//   target: string;
//   isBidirectional: boolean;
// }



// /**
//  * @typedef {Object} GraphLink
//  * @property {number} id - Identificador del enlace
//  * @property {number} x - Posici칩n en el eje x
//  * @property {number} y - Posici칩n en el eje y
//  * @property {number} z - Posici칩n en el eje z
//  * @property {string} name - Nombre del enlace
//  * @property {number} source - Nodo fuente del enlace
//  * @property {number} target - Nodo destino del enlace
//  * @property {string} group - Grupo al que pertenece el enlace
//  * @property {boolean} isBidirectional - Indica si el enlace est치 invertido
//  * @property {number} curvature - Curvatura del enlace
//  */
// type GraphLink = {
//   id: number;
//   x?: number;
//   y?: number;
//   z?: number;
//   name: string;
//   source: number;
//   target: number;
//   group?: string;
//   isBidirectional?: boolean;
//   curvature?: number
//   start: number,
//   end: number
// };

// /**
//  * @typedef {Object} GraphNode
//  * @property {number} id - Identificador del nodo
//  * @property {number} x - Posici칩n en el eje x
//  * @property {number} y - Posici칩n en el eje y
//  * @property {number} z - Posici칩n en el eje z
//  * @property {string} name - Nombre del nodo
//  * @property {string} color - Color del nodo
//  * @property {string} group - Grupo al que pertenece el nodo
//  * @property {string} type - Tipo de nodo
//  */
// type GraphNode = {
//   id: number;
//   x?: number;
//   y?: number;
//   z?: number;
//   name?: string;
//   color?: string;
//   group?: string;
// };


// export { configGlobal, groupColors, NodeType, LinkType, GraphLink, GraphNode }; 